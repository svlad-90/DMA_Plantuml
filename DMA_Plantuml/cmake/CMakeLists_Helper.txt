################### GOOGLE TEST ###########################

# function - sync_g_test_framework
# Syncs gtest framework, when project is being configured
function (sync_g_test_framework)
    IF (WIN32)
        option(CMAKE_USE_WIN32_THREADS_INIT "using WIN32 threads" ON)
        option(gtest_disable_pthreads "Disable uses of pthreads in gtest." ON)
    ENDIF()

    include(ExternalProject)
    configure_file(cmake/CMakeLists_gtest.txt.in googletest-download/CMakeLists.txt)
    execute_process(COMMAND ${CMAKE_COMMAND} -G "${CMAKE_GENERATOR}" .
        RESULT_VARIABLE result
        WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/googletest-download )
        
    if(result)
        message(FATAL_ERROR "CMake step for googletest failed: ${result}")
    endif()
    
    execute_process(COMMAND ${CMAKE_COMMAND} --build .
        RESULT_VARIABLE result
        WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/googletest-download )
        
    if(result)
        message(FATAL_ERROR "Build step for googletest failed: ${result}")
    endif()

    # Prevent overriding the parent project's compiler/linker
    # settings on Windows
    set(gtest_force_shared_crt ON CACHE BOOL "" FORCE)

    # Add googletest directly to our build. This defines
    # the gtest and gtest_main targets.
    add_subdirectory(${CMAKE_CURRENT_BINARY_DIR}/googletest-src
                     ${CMAKE_CURRENT_BINARY_DIR}/googletest-build
                     EXCLUDE_FROM_ALL)

    # The gtest/gtest_main targets carry header search path
    # dependencies automatically when using CMake 2.8.11 or
    # later. Otherwise we have to add them here ourselves.
    if (CMAKE_VERSION VERSION_LESS 2.8.11)
        include_directories("${gtest_SOURCE_DIR}/include")
    endif()
endfunction(sync_g_test_framework)

# function - add_g_test
# Adds gtest-based unit-test to the build
# param_0 - name of the test. Should be the same, as the name of the *.cpp file, which implements the test
# param_1 ... param_n - libraries, which should be linked to a test
function(add_g_test)
    if (DEFINED ARGV0)

        if(COMMAND cmake_policy)
          cmake_policy(SET CMP0003 NEW)
        endif(COMMAND cmake_policy)

        add_executable(${ARGV0} ${ARGV0}.cpp)
        target_link_libraries(${ARGV0} gtest_main)
        add_test(NAME ${ARGV0} COMMAND ${ARGV0})
        target_include_directories(${ARGV0} PRIVATE ${PROJECT_SOURCE_DIR})
        
        math(EXPR lastIndex "${ARGC}-1")
        foreach(index RANGE 1 ${lastIndex})
            target_link_libraries(${ARGV0} ${ARGV${index}})
        endforeach()
    endif()
endfunction(add_g_test)

################### GOOGLE TEST ( END ) ###################

################### CLANG_TIDY ############################
function(add_subdirectory_with_clang_tidy subdirectory)
    if( DMA_CLANG_TIDY_BUILD )
        message("-- [DMA_Plantuml]: clang-tidy build.")
        set(CMAKE_CXX_CLANG_TIDY "clang-tidy")
        list(APPEND CMAKE_CXX_CLANG_TIDY
        "-format-style='file'"
        "-warnings-as-errors=*" )
    endif()

    add_subdirectory(${subdirectory})
endfunction(add_subdirectory_with_clang_tidy)
################### CLANG_TIDY ( END ) ####################
